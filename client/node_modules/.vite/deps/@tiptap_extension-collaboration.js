import {
  redo,
  undo,
  ySyncPlugin,
  ySyncPluginKey,
  yUndoPlugin,
  yUndoPluginKey
} from "./chunk-RUG62H2O.js";
import "./chunk-M74H4FNP.js";
import "./chunk-UWGTVEMK.js";
import {
  Extension
} from "./chunk-WFUER6P7.js";
import "./chunk-V4OQ3NZ2.js";

// ../node_modules/.pnpm/@tiptap+extension-collaboration@2.4.0_@tiptap+core@2.4.0_@tiptap+pm@2.4.0__@tiptap+pm@2_de56f3837ec0ddbc177b00c085bd5821/node_modules/@tiptap/extension-collaboration/dist/index.js
var Collaboration = Extension.create({
  name: "collaboration",
  priority: 1e3,
  addOptions() {
    return {
      document: null,
      field: "default",
      fragment: null
    };
  },
  onCreate() {
    if (this.editor.extensionManager.extensions.find((extension) => extension.name === "history")) {
      console.warn('[tiptap warn]: "@tiptap/extension-collaboration" comes with its own history support and is not compatible with "@tiptap/extension-history".');
    }
  },
  addCommands() {
    return {
      undo: () => ({ tr, state, dispatch }) => {
        tr.setMeta("preventDispatch", true);
        const undoManager = yUndoPluginKey.getState(state).undoManager;
        if (undoManager.undoStack.length === 0) {
          return false;
        }
        if (!dispatch) {
          return true;
        }
        return undo(state);
      },
      redo: () => ({ tr, state, dispatch }) => {
        tr.setMeta("preventDispatch", true);
        const undoManager = yUndoPluginKey.getState(state).undoManager;
        if (undoManager.redoStack.length === 0) {
          return false;
        }
        if (!dispatch) {
          return true;
        }
        return redo(state);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Mod-y": () => this.editor.commands.redo(),
      "Shift-Mod-z": () => this.editor.commands.redo()
    };
  },
  addProseMirrorPlugins() {
    const fragment = this.options.fragment ? this.options.fragment : this.options.document.getXmlFragment(this.options.field);
    const yUndoPluginInstance = yUndoPlugin();
    const originalUndoPluginView = yUndoPluginInstance.spec.view;
    yUndoPluginInstance.spec.view = (view) => {
      const { undoManager } = yUndoPluginKey.getState(view.state);
      if (undoManager.restore) {
        undoManager.restore();
        undoManager.restore = () => {
        };
      }
      const viewRet = originalUndoPluginView ? originalUndoPluginView(view) : void 0;
      return {
        destroy: () => {
          const hasUndoManSelf = undoManager.trackedOrigins.has(undoManager);
          const observers = undoManager._observers;
          undoManager.restore = () => {
            if (hasUndoManSelf) {
              undoManager.trackedOrigins.add(undoManager);
            }
            undoManager.doc.on("afterTransaction", undoManager.afterTransactionHandler);
            undoManager._observers = observers;
          };
          if (viewRet === null || viewRet === void 0 ? void 0 : viewRet.destroy) {
            viewRet.destroy();
          }
        }
      };
    };
    const options = this.options.ySyncOptions;
    const onFirstRender = this.options.onFirstRender;
    const ySyncPluginOptions = {
      ...options ? { ...options } : {},
      ...onFirstRender ? { onFirstRender } : {}
    };
    const ySyncPluginInstance = ySyncPlugin(fragment, ySyncPluginOptions);
    return [ySyncPluginInstance, yUndoPluginInstance];
  }
});
function isChangeOrigin(transaction) {
  return !!transaction.getMeta(ySyncPluginKey);
}
export {
  Collaboration,
  Collaboration as default,
  isChangeOrigin
};
//# sourceMappingURL=@tiptap_extension-collaboration.js.map
