{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@tiptap+extension-collaboration@2.4.0_@tiptap+core@2.4.0_@tiptap+pm@2.4.0__@tiptap+pm@2_de56f3837ec0ddbc177b00c085bd5821/node_modules/@tiptap/extension-collaboration/src/collaboration.ts", "../../../../node_modules/.pnpm/@tiptap+extension-collaboration@2.4.0_@tiptap+core@2.4.0_@tiptap+pm@2.4.0__@tiptap+pm@2_de56f3837ec0ddbc177b00c085bd5821/node_modules/@tiptap/extension-collaboration/src/helpers/isChangeOrigin.ts"],
  "sourcesContent": ["import { Extension } from '@tiptap/core'\nimport { EditorView } from '@tiptap/pm/view'\nimport {\n  redo,\n  undo,\n  ySyncPlugin,\n  yUndoPlugin,\n  yUndoPluginKey,\n} from 'y-prosemirror'\nimport { UndoManager } from 'yjs'\n\ntype YSyncOpts = Parameters<typeof ySyncPlugin>[1]\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    collaboration: {\n      /**\n       * Undo recent changes\n       * @example editor.commands.undo()\n       */\n      undo: () => ReturnType,\n      /**\n       * Reapply reverted changes\n       * @example editor.commands.redo()\n       */\n      redo: () => ReturnType,\n    }\n  }\n}\n\nexport interface CollaborationOptions {\n  /**\n   * An initialized Y.js document.\n   * @example new Y.Doc()\n   */\n  document: any,\n\n  /**\n   * Name of a Y.js fragment, can be changed to sync multiple fields with one Y.js document.\n   * @default 'default'\n   * @example 'my-custom-field'\n   */\n  field: string,\n\n  /**\n   * A raw Y.js fragment, can be used instead of `document` and `field`.\n   * @example new Y.Doc().getXmlFragment('body')\n   */\n  fragment: any,\n\n  /**\n   * Fired when the content from Yjs is initially rendered to Tiptap.\n   */\n  onFirstRender?: () => void,\n\n  ySyncOptions?: YSyncOpts\n}\n\n/**\n * This extension allows you to collaborate with others in real-time.\n * @see https://tiptap.dev/api/extensions/collaboration\n */\nexport const Collaboration = Extension.create<CollaborationOptions>({\n  name: 'collaboration',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      document: null,\n      field: 'default',\n      fragment: null,\n    }\n  },\n\n  onCreate() {\n    if (this.editor.extensionManager.extensions.find(extension => extension.name === 'history')) {\n      console.warn('[tiptap warn]: \"@tiptap/extension-collaboration\" comes with its own history support and is not compatible with \"@tiptap/extension-history\".')\n    }\n  },\n\n  addCommands() {\n    return {\n      undo: () => ({ tr, state, dispatch }) => {\n        tr.setMeta('preventDispatch', true)\n\n        const undoManager: UndoManager = yUndoPluginKey.getState(state).undoManager\n\n        if (undoManager.undoStack.length === 0) {\n          return false\n        }\n\n        if (!dispatch) {\n          return true\n        }\n\n        return undo(state)\n      },\n      redo: () => ({ tr, state, dispatch }) => {\n        tr.setMeta('preventDispatch', true)\n\n        const undoManager: UndoManager = yUndoPluginKey.getState(state).undoManager\n\n        if (undoManager.redoStack.length === 0) {\n          return false\n        }\n\n        if (!dispatch) {\n          return true\n        }\n\n        return redo(state)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-z': () => this.editor.commands.undo(),\n      'Mod-y': () => this.editor.commands.redo(),\n      'Shift-Mod-z': () => this.editor.commands.redo(),\n    }\n  },\n\n  addProseMirrorPlugins() {\n    const fragment = this.options.fragment\n      ? this.options.fragment\n      : this.options.document.getXmlFragment(this.options.field)\n\n    // Quick fix until there is an official implementation (thanks to @hamflx).\n    // See https://github.com/yjs/y-prosemirror/issues/114 and https://github.com/yjs/y-prosemirror/issues/102\n    const yUndoPluginInstance = yUndoPlugin()\n    const originalUndoPluginView = yUndoPluginInstance.spec.view\n\n    yUndoPluginInstance.spec.view = (view: EditorView) => {\n      const { undoManager } = yUndoPluginKey.getState(view.state)\n\n      if (undoManager.restore) {\n        undoManager.restore()\n        // eslint-disable-next-line\n        undoManager.restore = () => {}\n      }\n\n      const viewRet = originalUndoPluginView ? originalUndoPluginView(view) : undefined\n\n      return {\n        destroy: () => {\n          const hasUndoManSelf = undoManager.trackedOrigins.has(undoManager)\n          // eslint-disable-next-line\n          const observers = undoManager._observers\n\n          undoManager.restore = () => {\n            if (hasUndoManSelf) {\n              undoManager.trackedOrigins.add(undoManager)\n            }\n\n            undoManager.doc.on('afterTransaction', undoManager.afterTransactionHandler)\n            // eslint-disable-next-line\n            undoManager._observers = observers\n          }\n\n          if (viewRet?.destroy) {\n            viewRet.destroy()\n          }\n        },\n      }\n    }\n\n    const options = this.options.ySyncOptions\n    const onFirstRender = this.options.onFirstRender\n    const ySyncPluginOptions: YSyncOpts = {\n      ...(options ? { ...options } : {}),\n      ...(onFirstRender ? { onFirstRender } : {}),\n    }\n\n    const ySyncPluginInstance = ySyncPlugin(fragment, ySyncPluginOptions)\n\n    return [ySyncPluginInstance, yUndoPluginInstance]\n  },\n})\n", "import { Transaction } from '@tiptap/pm/state'\nimport { ySyncPluginKey } from 'y-prosemirror'\n\n/**\n * Checks if a transaction was originated from a Yjs change.\n * @param {Transaction} transaction - The transaction to check.\n * @returns {boolean} - True if the transaction was originated from a Yjs change, false otherwise.\n * @example\n * const transaction = new Transaction(doc)\n * const isOrigin = isChangeOrigin(transaction) // returns false\n */\nexport function isChangeOrigin(transaction: Transaction): boolean {\n  return !!transaction.getMeta(ySyncPluginKey)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AA8Da,IAAA,gBAAgB,UAAU,OAA6B;EAClE,MAAM;EAEN,UAAU;EAEV,aAAU;AACR,WAAO;MACL,UAAU;MACV,OAAO;MACP,UAAU;;;EAId,WAAQ;AACN,QAAI,KAAK,OAAO,iBAAiB,WAAW,KAAK,eAAa,UAAU,SAAS,SAAS,GAAG;AAC3F,cAAQ,KAAK,6IAA6I;IAC3J;;EAGH,cAAW;AACT,WAAO;MACL,MAAM,MAAM,CAAC,EAAE,IAAI,OAAO,SAAQ,MAAM;AACtC,WAAG,QAAQ,mBAAmB,IAAI;AAElC,cAAM,cAA2B,eAAe,SAAS,KAAK,EAAE;AAEhE,YAAI,YAAY,UAAU,WAAW,GAAG;AACtC,iBAAO;QACR;AAED,YAAI,CAAC,UAAU;AACb,iBAAO;QACR;AAED,eAAO,KAAK,KAAK;;MAEnB,MAAM,MAAM,CAAC,EAAE,IAAI,OAAO,SAAQ,MAAM;AACtC,WAAG,QAAQ,mBAAmB,IAAI;AAElC,cAAM,cAA2B,eAAe,SAAS,KAAK,EAAE;AAEhE,YAAI,YAAY,UAAU,WAAW,GAAG;AACtC,iBAAO;QACR;AAED,YAAI,CAAC,UAAU;AACb,iBAAO;QACR;AAED,eAAO,KAAK,KAAK;;;;EAKvB,uBAAoB;AAClB,WAAO;MACL,SAAS,MAAM,KAAK,OAAO,SAAS,KAAI;MACxC,SAAS,MAAM,KAAK,OAAO,SAAS,KAAI;MACxC,eAAe,MAAM,KAAK,OAAO,SAAS,KAAI;;;EAIlD,wBAAqB;AACnB,UAAM,WAAW,KAAK,QAAQ,WAC1B,KAAK,QAAQ,WACb,KAAK,QAAQ,SAAS,eAAe,KAAK,QAAQ,KAAK;AAI3D,UAAM,sBAAsB,YAAW;AACvC,UAAM,yBAAyB,oBAAoB,KAAK;AAExD,wBAAoB,KAAK,OAAO,CAAC,SAAoB;AACnD,YAAM,EAAE,YAAW,IAAK,eAAe,SAAS,KAAK,KAAK;AAE1D,UAAI,YAAY,SAAS;AACvB,oBAAY,QAAO;AAEnB,oBAAY,UAAU,MAAK;QAAA;MAC5B;AAED,YAAM,UAAU,yBAAyB,uBAAuB,IAAI,IAAI;AAExE,aAAO;QACL,SAAS,MAAK;AACZ,gBAAM,iBAAiB,YAAY,eAAe,IAAI,WAAW;AAEjE,gBAAM,YAAY,YAAY;AAE9B,sBAAY,UAAU,MAAK;AACzB,gBAAI,gBAAgB;AAClB,0BAAY,eAAe,IAAI,WAAW;YAC3C;AAED,wBAAY,IAAI,GAAG,oBAAoB,YAAY,uBAAuB;AAE1E,wBAAY,aAAa;UAC3B;AAEA,cAAI,YAAA,QAAA,YAAO,SAAA,SAAP,QAAS,SAAS;AACpB,oBAAQ,QAAO;UAChB;;;IAGP;AAEA,UAAM,UAAU,KAAK,QAAQ;AAC7B,UAAM,gBAAgB,KAAK,QAAQ;AACnC,UAAM,qBAAgC;MACpC,GAAI,UAAU,EAAE,GAAG,QAAO,IAAK,CAAA;MAC/B,GAAI,gBAAgB,EAAE,cAAa,IAAK,CAAA;;AAG1C,UAAM,sBAAsB,YAAY,UAAU,kBAAkB;AAEpE,WAAO,CAAC,qBAAqB,mBAAmB;;AAEnD,CAAA;ACxKK,SAAU,eAAe,aAAwB;AACrD,SAAO,CAAC,CAAC,YAAY,QAAQ,cAAc;AAC7C;",
  "names": []
}
