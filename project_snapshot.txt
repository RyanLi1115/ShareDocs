Project Snapshot for: /Users/yiranli/Desktop/9900/SDG-Docs
Generated on: 2025-07-16 03:36:55
================================================================================

--- FILE: ./README.md ---

# SDG-Docs

This is a local-first, real-time collaborative document editor built to enterprise standards.

## How to Run

1.  **Install Dependencies:**
    ```bash
    # using pnpm (recommended)
    pnpm install:all
    ```

2.  **Run the application (Server + Client):**
    ```bash
    pnpm run dev:concurrently
    ```

This will start the WebSocket server and the React client application. Open multiple browser tabs to `http://localhost:5173` to simulate multi-user collaboration.


================================================================================

--- FILE: ./.gitignore ---

# Dependencies
/node_modules
/.pnp
.pnp.js

# Build artifacts
/dist
/build
/.vite

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# IDE / OS files
.DS_Store
.idea/
.vscode/
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


================================================================================

--- FILE: ./package.json ---

{
  "name": "sdg-docs",
  "version": "1.0.0",
  "private": true,
  "description": "Local real-time collaborative document editor",
  "scripts": {
    "dev": "pnpm --filter client dev",
    "server": "pnpm --filter server start",
    "dev:concurrently": "pnpm install && concurrently \"pnpm run server\" \"pnpm run dev\"",
    "install:all": "pnpm install && pnpm --filter client install && pnpm --filter server install"
  },
  "keywords": [
    "crdt",
    "yjs",
    "collaboration",
    "react",
    "tiptap"
  ],
  "author": "",
  "license": "UNLICENSED",
  "devDependencies": {
    "concurrently": "^8.2.2"
  }
}


================================================================================

--- FILE: ./create_snapshot.py ---

# create_snapshot.py

import os
import datetime

# --- 配置 ---
# 要扫描的根文件夹 ( '.' 代表当前文件夹)
ROOT_DIR = '.'
# 输出文件的名称
OUTPUT_FILE = 'project_snapshot.txt'
# 要完全忽略的文件夹名称列表
IGNORE_DIRS = {
    'node_modules',
    '.git',
    '.vscode',
    '.idea',
    'dist',
    'build',
    '__pycache__',
}
# 要忽略的特定文件名称列表
IGNORE_FILES = {
    '.DS_Store',
    'project_snapshot.txt', # 忽略脚本自己生成的输出文件
}
# 要忽略的文件扩展名列表 (主要是二进制文件或非文本文件)
IGNORE_EXTS = {
    '.png',
    '.jpg',
    '.jpeg',
    '.gif',
    '.svg',
    '.ico',
    '.woff',
    '.woff2',
    '.ttf',
    '.eot',
    '.otf',
    '.mp3',
    '.mp4',
    '.zip',
    '.gz',
    '.lock', # 比如 package-lock.json
    '.yaml'  # 比如 pnpm-lock.yaml
}

def create_project_snapshot():
    """
    遍历指定目录，将所有文本文件的路径和内容写入一个单一的输出文件。
    """
    # 使用 'w' 模式打开文件，意味着每次运行都会覆盖旧文件
    # 使用 utf-8 编码来处理各种字符
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        # 写入文件头信息
        f.write(f"Project Snapshot for: {os.path.abspath(ROOT_DIR)}\n")
        f.write(f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("="*80 + "\n\n")

        # os.walk 会递归地遍历所有子文件夹
        for dirpath, dirnames, filenames in os.walk(ROOT_DIR, topdown=True):
            
            # --- 忽略指定的文件夹 ---
            # 我们需要修改 dirnames 列表来阻止 os.walk 进入这些文件夹
            # 使用列表推导式来创建一个不包含被忽略目录的新列表
            dirnames[:] = [d for d in dirnames if d not in IGNORE_DIRS]

            for filename in filenames:
                # --- 忽略指定的文件和扩展名 ---
                if filename in IGNORE_FILES:
                    continue
                
                # 分离文件名和扩展名
                _, file_ext = os.path.splitext(filename)
                if file_ext in IGNORE_EXTS:
                    continue

                # 构造完整的文件路径
                file_path = os.path.join(dirpath, filename)
                
                # 写入文件路径作为标题
                f.write(f"--- FILE: {file_path} ---\n\n")

                try:
                    # 读取文件内容并写入
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as content_file:
                        content = content_file.read()
                        f.write(content)
                except Exception as e:
                    # 如果读取文件时发生错误（例如，它是一个意料之外的二进制文件）
                    f.write(f"[Error reading file: {e}]")
                
                # 在每个文件内容后添加分隔符，使其更易读
                f.write("\n\n" + "="*80 + "\n\n")

    print(f"✅ Project snapshot saved to '{OUTPUT_FILE}'")

if __name__ == '__main__':
    create_project_snapshot()

================================================================================

--- FILE: ./tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["client/src"]
}


================================================================================

--- FILE: ./server/index.js ---

// server/index.js (最终业务逻辑版)

import { WebSocketServer } from 'ws';
import { setupWSConnection, docs } from 'y-websocket/bin/utils';

// ===================================================
// 在内存中模拟数据库
// ===================================================
const users = {}; // { 'username': { password: '...' } }
const groups = {}; // { 'groupName': { members: Set<string> } }
const connections = new Map(); // ws -> { username, groupName }

const wss = new WebSocketServer({ port: 1234 });
console.log('🚀 SDG-Docs WebSocket server running on ws://localhost:1234');

// ===================================================
// WebSocket Server Logic
// ===================================================
wss.on('connection', (ws) => {
  console.log('✅ Client connected.');

  ws.on('message', (message) => {
    let data;
    try {
      data = JSON.parse(message.toString());
    } catch (e) {
      // 忽略无法解析的非JSON消息 (很可能是Y.js的二进制消息)
      return;
    }

    switch (data.type) {
      case 'auth':
        handleAuth(ws, data.payload);
        break;
      case 'get_groups':
        handleGetGroups(ws);
        break;
      case 'create_group':
        handleCreateGroup(ws, data.payload);
        break;
      case 'join_group':
        handleJoinGroup(ws, data.payload);
        break;
    }
  });

  ws.on('close', () => {
    const connInfo = connections.get(ws);
    if (connInfo) {
      console.log(`❌ Client '${connInfo.username}' disconnected.`);
      // 从小组中移除成员
      if (connInfo.groupName && groups[connInfo.groupName]) {
        groups[connInfo.groupName].members.delete(connInfo.username);
        // 广播用户列表和小组列表的更新
        setTimeout(() => {
            broadcastUserList(connInfo.groupName);
            broadcastGroupListToAll();
        }, 100);
      }
      connections.delete(ws);
    }
  });
});

// ===================================================
// Business Logic Handlers
// ===================================================

function handleAuth(ws, { action, username, password }) {
  if (action === 'register') {
    if (users[username]) {
      ws.send(JSON.stringify({ type: 'auth_failed', message: 'Username already exists.' }));
    } else {
      users[username] = { password };
      connections.set(ws, { username, groupName: null });
      ws.send(JSON.stringify({ type: 'auth_success', username }));
      console.log(`New user registered: ${username}`);
    }
  } else if (action === 'login') {
    if (!users[username]) {
      ws.send(JSON.stringify({ type: 'auth_failed', message: 'User does not exist.' }));
    } else if (users[username].password === password) {
      connections.set(ws, { username, groupName: null });
      ws.send(JSON.stringify({ type: 'auth_success', username }));
      console.log(`User logged in: ${username}`);
    } else {
      ws.send(JSON.stringify({ type: 'auth_failed', message: 'Invalid password.' }));
    }
  }
}

function handleGetGroups(ws) {
  const groupData = {};
  for(const groupName in groups) {
    groupData[groupName] = Array.from(groups[groupName].members);
  }
  ws.send(JSON.stringify({ type: 'groups_list', payload: groupData }));
}

function handleCreateGroup(ws, { groupName }) {
    if(groups[groupName]) {
        ws.send(JSON.stringify({ type: 'group_failed', message: 'Group already exists.' }));
        return;
    }
    groups[groupName] = { members: new Set() };
    console.log(`Group created: ${groupName}`);
    broadcastGroupListToAll();
    ws.send(JSON.stringify({ type: 'group_created', groupName }));
}

function handleJoinGroup(ws, { groupName, user }) {
  const connInfo = connections.get(ws);
  if (!connInfo || !connInfo.username) return;

  // 如果用户之前在别的组，先从旧组里移除
  if (connInfo.groupName && groups[connInfo.groupName]) {
    groups[connInfo.groupName].members.delete(connInfo.username);
    broadcastUserList(connInfo.groupName);
  }

  connInfo.groupName = groupName;
  groups[groupName].members.add(connInfo.username);

  setupWSConnection(ws, null, { docName: groupName, gc: true });
  const doc = docs.get(groupName);
  if (doc) {
    doc.awareness.setLocalStateField('user', user);
  }
  console.log(`User '${connInfo.username}' joined group: ${groupName}`);
  broadcastUserList(groupName);
  broadcastGroupListToAll();
}

function broadcastUserList(groupName) {
  const doc = docs.get(groupName);
  if (!doc) return;

  const onlineUsers = [];
  doc.awareness.getStates().forEach(state => {
    if (state.user) onlineUsers.push(state.user);
  });
  
  for (const [socket, conn] of connections.entries()) {
    if (conn.groupName === groupName && socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ type: 'presence_update', users: onlineUsers }));
    }
  }
}

function broadcastGroupListToAll() {
    const groupData = {};
    for(const groupName in groups) {
        groupData[groupName] = Array.from(groups[groupName].members);
    }
    for (const socket of wss.clients) {
        if (socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ type: 'groups_list', payload: groupData }));
        }
    }
}

================================================================================

--- FILE: ./server/package.json ---

{
  "name": "server",
  "version": "1.0.0",
  "description": "Local WebSocket signaling server for SDG-Docs",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "uuid": "^11.1.0",
    "ws": "^8.17.0",
    "y-websocket": "^2.0.3"
  }
}

================================================================================

--- FILE: ./client/index.html ---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
    />
    <title>SDG-Docs</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


================================================================================

--- FILE: ./client/package.json ---

{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --force",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@mui/icons-material": "^5.15.19",
    "@mui/material": "^5.15.19",
    "@tiptap/core": "2.4.0",
    "@tiptap/extension-blockquote": "2.4.0",
    "@tiptap/extension-bold": "2.4.0",
    "@tiptap/extension-bullet-list": "2.4.0",
    "@tiptap/extension-code-block": "2.4.0",
    "@tiptap/extension-collaboration": "2.4.0",
    "@tiptap/extension-collaboration-cursor": "2.4.0",
    "@tiptap/extension-document": "2.4.0",
    "@tiptap/extension-dropcursor": "2.4.0",
    "@tiptap/extension-gapcursor": "2.4.0",
    "@tiptap/extension-heading": "2.4.0",
    "@tiptap/extension-history": "2.4.0",
    "@tiptap/extension-horizontal-rule": "2.4.0",
    "@tiptap/extension-italic": "2.4.0",
    "@tiptap/extension-link": "2.4.0",
    "@tiptap/extension-list-item": "2.4.0",
    "@tiptap/extension-ordered-list": "2.4.0",
    "@tiptap/extension-paragraph": "2.4.0",
    "@tiptap/extension-strike": "2.4.0",
    "@tiptap/extension-text": "2.4.0",
    "@tiptap/extension-text-align": "2.4.0",
    "@tiptap/extension-underline": "2.4.0",
    "@tiptap/pm": "2.4.0",
    "@tiptap/react": "2.4.0",
    "@tiptap/starter-kit": "2.4.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.6.3",
    "y-websocket": "2.0.3",
    "yjs": "13.6.14"
  },
  "devDependencies": {
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "vite": "^7.0.4"
  }
}


================================================================================

--- FILE: ./client/src/App.tsx ---

// client/src/App.tsx
import { useState } from 'react';
import { useApp } from './context/AppContext';
import { AuthPage } from './pages/AuthPage';
import { GroupPage } from './pages/GroupPage';
import { EditorPage } from './pages/EditorPage';

function App() {
  const { authState, username } = useApp();
  const [currentGroup, setCurrentGroup] = useState<string | null>(null);

  if (authState === 'LOGGED_OUT') {
    return <AuthPage />;
  }
  
  if (!currentGroup) {
    return <GroupPage username={username} onJoinGroup={setCurrentGroup} />;
  }

  return <EditorPage groupName={currentGroup} username={username} />;
}

export default App;

================================================================================

--- FILE: ./client/src/main.tsx ---

// client/src/main.tsx
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import { AppProvider } from './context/AppContext';
import { CssBaseline, ThemeProvider } from '@mui/material';
import theme from './styles/theme';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <AppProvider>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <App />
    </ThemeProvider>
  </AppProvider>
);

================================================================================

--- FILE: ./client/src/context/AppContext.tsx ---

// client/src/context/AppContext.tsx

import { createContext, useContext, useState, useRef, useEffect, useCallback } from 'react';

// 定义小组列表的数据结构
type Groups = Record<string, string[]>;

interface AppContextType {
  ws: WebSocket | null;
  authState: 'LOGGED_OUT' | 'LOGGED_IN';
  username: string;
  groups: Groups; // 添加 groups 到 context 类型
  login: (user: string, pass: string) => void;
  register: (user: string, pass: string) => void;
  logout: () => void;
  getGroups: () => void; // 添加 getGroups 函数到类型
  createGroup: (groupName: string) => void;
  joinGroup: (groupName: string, user: { name: string, color: string }) => void;
}

const AppContext = createContext<AppContextType | null>(null);

export const AppProvider = ({ children }) => {
  const [authState, setAuthState] = useState<'LOGGED_OUT' | 'LOGGED_IN'>('LOGGED_OUT');
  const [username, setUsername] = useState('');
  const [groups, setGroups] = useState<Groups>({}); // 1. 将 groups 状态移到这里
  const ws = useRef<WebSocket | null>(null);

  useEffect(() => {
    const socket = new WebSocket('ws://localhost:1234');
    ws.current = socket;
    
    socket.onopen = () => console.log('WebSocket Connected');
    socket.onclose = () => {
      console.log('WebSocket Disconnected');
      setAuthState('LOGGED_OUT');
      setUsername('');
    };

    socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data.toString());
        console.log("Received message:", data.type);

        switch (data.type) {
          case 'auth_success':
            setUsername(data.username);
            setAuthState('LOGGED_IN');
            break;
          case 'auth_failed':
            alert(`Auth Failed: ${data.message}`);
            break;
          case 'groups_list': // 2. 在这里统一处理 groups_list 消息
            setGroups(data.payload || {}); // 使用 || {} 来防止 null
            break;
          case 'group_failed':
            alert(`Group action failed: ${data.message}`);
            break;
        }
      } catch (e) { /* 忽略非JSON消息 */ }
    };

    return () => {
      socket.close();
    };
  }, []);

  const login = (user: string, pass: string) => {
    ws.current?.send(JSON.stringify({ type: 'auth', payload: { action: 'login', username: user, password: pass } }));
  };
  
  const register = (user: string, pass: string) => {
    ws.current?.send(JSON.stringify({ type: 'auth', payload: { action: 'register', username: user, password: pass } }));
  };

  const logout = () => {
    window.location.reload();
  };
  
  // 3. 将获取、创建、加入小组的函数也定义在这里
  const getGroups = useCallback(() => {
    ws.current?.send(JSON.stringify({ type: 'get_groups' }));
  }, []);

  const createGroup = useCallback((groupName: string) => {
    ws.current?.send(JSON.stringify({ type: 'create_group', payload: { groupName } }));
  }, []);

  const joinGroup = useCallback((groupName: string, user: { name: string, color: string }) => {
    ws.current?.send(JSON.stringify({ type: 'join_group', payload: { groupName, user } }));
  }, []);

  const value = { 
    ws: ws.current, 
    authState, 
    username, 
    groups, // 4. 将 groups 和相关函数传给所有子组件
    login, 
    register, 
    logout,
    getGroups,
    createGroup,
    joinGroup,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};

export const useApp = (): AppContextType => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
};

================================================================================

--- FILE: ./client/src/styles/editor.css ---

/* client/src/styles/editor.css (用户名标签一直可见的版本) */

/* --- Base Editor Styles --- */

/* client/src/styles/editor.css */

.ProseMirror:focus {
  /* 移除蓝色边框 */
  border-color: transparent; 
  /* 移除默认的 outline */
  outline: none;
  /* 用一个更柔和的阴影来表示焦点状态，符合 M3 规范 */
  box-shadow: 0 0 0 2px #4285F4;
}

.ProseMirror:focus {
  outline: none;
}

.ProseMirror > * + * {
  margin-top: 0.75em;
}

/* --- Collaboration Cursor Customization --- */

.collaboration-cursor__caret {
  position: relative;
  margin-left: -1px;
  margin-right: -1px;
  border-left: 1px solid var(--collaboration-cursor-color);
  border-right: 1px solid var(--collaboration-cursor-color);
  word-break: normal;
  pointer-events: none;
}

.collaboration-cursor__label {
  position: absolute;
  top: -1.4em;
  left: -1px;
  font-size: 10px;
  font-style: normal;
  font-weight: 600;
  line-height: normal;
  user-select: none;
  pointer-events: none;
  white-space: nowrap;

  color: white;
  background-color: var(--collaboration-cursor-color);
  padding: 0.1rem 0.3rem;
  border-radius: 3px;

  /* 核心修改：让标签一直可见，移除动画 */
  opacity: 1;
}

================================================================================

--- FILE: ./client/src/styles/theme.ts ---

// client/src/styles/theme.ts
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    mode: 'light',
    primary: {
      main: '#4285F4', // Google Blue
    },
    background: {
      default: '#F8F9FA', // M3 Surface Container
      paper: '#FFFFFF',   // M3 Surface
    },
    text: {
      primary: '#1F1F1F',   // M3 On Surface
      secondary: '#444746', // M3 On Surface Variant
    },
    divider: '#C4C7C5', // M3 Outline
  },
  typography: {
    fontFamily: 'Roboto, sans-serif',
  },
  shape: {
    borderRadius: 8, // M3 a'da standart köşe yuvarlaklığı
  },
  components: {
    // MuiToggleButton'ın stillerini özelleştirme
    MuiToggleButton: {
      styleOverrides: {
        root: {
          '&.Mui-selected': {
            backgroundColor: 'rgba(66, 133, 244, 0.12)', // Primary color with 12% opacity
            color: '#0b57d0',
            '&:hover': {
              backgroundColor: 'rgba(66, 133, 244, 0.16)',
            },
          },
        },
      },
    },
  },
});

export default theme;

================================================================================

--- FILE: ./client/src/components/EditorToolbar.tsx ---

// client/src/components/EditorToolbar.tsx

// We no longer need to import React here.
import { useCallback } from 'react';
import type { Editor } from '@tiptap/core'; // 1. Import the 'Editor' type from TipTap's core.
import { Box, IconButton, Divider, ToggleButtonGroup, ToggleButton, Tooltip } from '@mui/material';

// Icon imports remain the same...
import FormatBoldIcon from '@mui/icons-material/FormatBold';
import FormatItalicIcon from '@mui/icons-material/FormatItalic';
import FormatUnderlinedIcon from '@mui/icons-material/FormatUnderlined';
import FormatStrikethroughIcon from '@mui/icons-material/FormatStrikethrough';
import LooksOneIcon from '@mui/icons-material/LooksOne';
import LooksTwoIcon from '@mui/icons-material/LooksTwo';
import Looks3Icon from '@mui/icons-material/Looks3';
import FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';
import FormatListNumberedIcon from '@mui/icons-material/FormatListNumbered';
import FormatQuoteIcon from '@mui/icons-material/FormatQuote';
import CodeIcon from '@mui/icons-material/Code';
import FormatAlignLeftIcon from '@mui/icons-material/FormatAlignLeft';
import FormatAlignCenterIcon from '@mui/icons-material/FormatAlignCenter';
import FormatAlignRightIcon from '@mui/icons-material/FormatAlignRight';
import LinkIcon from '@mui/icons-material/Link';
import HorizontalRuleIcon from '@mui/icons-material/HorizontalRule';

// 2. Define the type for our component's props.
// 'editor' can be null initially while it's loading.
interface EditorToolbarProps {
  editor: Editor | null;
}

const EditorToolbar = ({ editor }: EditorToolbarProps) => {
  if (!editor) {
    return null;
  }

  // The rest of the component logic remains exactly the same...
  const setLink = useCallback(() => {
    const previousUrl = editor.getAttributes('link').href;
    const url = window.prompt('URL', previousUrl);
    if (url === null) return;
    if (url === '') {
      editor.chain().focus().extendMarkRange('link').unsetLink().run();
      return;
    }
    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
  }, [editor]);

  const activeButtons = [
    'bold', 'italic', 'underline', 'strike', 
    'bulletList', 'orderedList', 'blockquote', 'codeBlock'
  ].filter(type => editor.isActive(type));

  const activeHeading = () => {
    for (let i = 1; i <= 3; i++) {
      if (editor.isActive('heading', { level: i })) return `h${i}`;
    }
    return '';
  }

  const activeAlignment = () => {
    if (editor.isActive({ textAlign: 'center' })) return 'center';
    if (editor.isActive({ textAlign: 'right' })) return 'right';
    return 'left';
  }

  return (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        flexWrap: 'wrap',
        padding: '4px 16px',
        borderBottom: '1px solid #C4C7C5',
        backgroundColor: '#FFFFFF',
        position: 'sticky',
        top: '64px',
        zIndex: 10,
      }}
    >
      {/* Heading Group */}
      <ToggleButtonGroup size="small" value={activeHeading()} exclusive>
        <Tooltip title="Heading 1"><ToggleButton value="h1" onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}><LooksOneIcon /></ToggleButton></Tooltip>
        <Tooltip title="Heading 2"><ToggleButton value="h2" onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}><LooksTwoIcon /></ToggleButton></Tooltip>
        <Tooltip title="Heading 3"><ToggleButton value="h3" onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}><Looks3Icon /></ToggleButton></Tooltip>
      </ToggleButtonGroup>
      <Divider flexItem orientation="vertical" sx={{ mx: 1, my: 1 }} />

      {/* Basic Formatting Group */}
      <ToggleButtonGroup size="small" value={activeButtons}>
        <Tooltip title="Bold (Ctrl+B)"><ToggleButton value="bold" onClick={() => editor.chain().focus().toggleBold().run()}><FormatBoldIcon /></ToggleButton></Tooltip>
        <Tooltip title="Italic (Ctrl+I)"><ToggleButton value="italic" onClick={() => editor.chain().focus().toggleItalic().run()}><FormatItalicIcon /></ToggleButton></Tooltip>
        <Tooltip title="Underline (Ctrl+U)"><ToggleButton value="underline" onClick={() => editor.chain().focus().toggleUnderline().run()}><FormatUnderlinedIcon /></ToggleButton></Tooltip>
        <Tooltip title="Strikethrough"><ToggleButton value="strike" onClick={() => editor.chain().focus().toggleStrike().run()}><FormatStrikethroughIcon /></ToggleButton></Tooltip>
      </ToggleButtonGroup>
      <Divider flexItem orientation="vertical" sx={{ mx: 1, my: 1 }} />
      
      {/* Alignment Group */}
      <ToggleButtonGroup size="small" value={activeAlignment()} exclusive>
        <Tooltip title="Align Left"><ToggleButton value="left" onClick={() => editor.chain().focus().setTextAlign('left').run()}><FormatAlignLeftIcon /></ToggleButton></Tooltip>
        <Tooltip title="Align Center"><ToggleButton value="center" onClick={() => editor.chain().focus().setTextAlign('center').run()}><FormatAlignCenterIcon /></ToggleButton></Tooltip>
        <Tooltip title="Align Right"><ToggleButton value="right" onClick={() => editor.chain().focus().setTextAlign('right').run()}><FormatAlignRightIcon /></ToggleButton></Tooltip>
      </ToggleButtonGroup>
      <Divider flexItem orientation="vertical" sx={{ mx: 1, my: 1 }} />

      {/* Block Formatting Group */}
      <ToggleButtonGroup size="small" value={activeButtons}>
        <Tooltip title="Bullet List"><ToggleButton value="bulletList" onClick={() => editor.chain().focus().toggleBulletList().run()}><FormatListBulletedIcon /></ToggleButton></Tooltip>
        <Tooltip title="Numbered List"><ToggleButton value="orderedList" onClick={() => editor.chain().focus().toggleOrderedList().run()}><FormatListNumberedIcon /></ToggleButton></Tooltip>
        <Tooltip title="Blockquote"><ToggleButton value="blockquote" onClick={() => editor.chain().focus().toggleBlockquote().run()}><FormatQuoteIcon /></ToggleButton></Tooltip>
        <Tooltip title="Code Block"><ToggleButton value="codeBlock" onClick={() => editor.chain().focus().toggleCodeBlock().run()}><CodeIcon /></ToggleButton></Tooltip>
      </ToggleButtonGroup>
      <Divider flexItem orientation="vertical" sx={{ mx: 1, my: 1 }} />

      {/* Special Elements Group */}
      <Tooltip title="Insert/Edit Link">
        <IconButton onClick={setLink}>
          <LinkIcon />
        </IconButton>
      </Tooltip>
      <Tooltip title="Horizontal Rule">
        <IconButton onClick={() => editor.chain().focus().setHorizontalRule().run()}>
          <HorizontalRuleIcon />
        </IconButton>
      </Tooltip>
    </Box>
  );
};

export default EditorToolbar;

================================================================================

--- FILE: ./client/src/components/TiptapEditor.tsx ---

// client/src/components/TiptapEditor.tsx

import { EditorContent } from '@tiptap/react';
import React from 'react';

// 接收一个 editor 对象作为 prop
const TiptapEditor = ({ editor }) => {
  // 我们不再需要在这里使用 useEditor Hook
  return (
    <EditorContent editor={editor} />
  );
};

export default TiptapEditor;

================================================================================

--- FILE: ./client/src/components/AppHeader.tsx ---

// client/src/components/AppHeader.tsx
import { AppBar, Toolbar, Typography, Box, Avatar, Tooltip } from '@mui/material';

export default function AppHeader({ onlineUsers }) {
    return (
        <AppBar position="sticky" elevation={0} sx={{ backgroundColor: 'background.paper', borderBottom: '1px solid', borderColor: 'divider' }}>
            <Toolbar sx={{ height: '64px' }}>
                <Typography variant="h6" sx={{ flexGrow: 1 }}>SDG-Docs</Typography>
                <Box display="flex" gap={1}>
                    {onlineUsers.map(user => (
                        <Tooltip key={user.name} title={user.name}>
                            <Avatar sx={{ bgcolor: user.color, width: 32, height: 32 }}>
                                {user.name.charAt(0).toUpperCase()}
                            </Avatar>
                        </Tooltip>
                    ))}
                </Box>
            </Toolbar>
        </AppBar>
    );
}

================================================================================

--- FILE: ./client/src/components/PresenceAvatars.tsx ---



================================================================================

--- FILE: ./client/src/lib/yjs.ts ---

// client/src/lib/yjs.ts

import * as Y from 'yjs';
import { WebsocketProvider } from 'y-websocket';

// 定义一个函数来设置协同环境
export const setupCollaboration = (roomName: string) => {
  const ydoc = new Y.Doc();
  const provider = new WebsocketProvider(
    'ws://localhost:1234',
    roomName,
    ydoc
  );

  // 返回一个 Promise，它将在连接成功后解析
  return new Promise<{ ydoc: Y.Doc; provider: WebsocketProvider }>((resolve) => {
    // 监听 provider 的状态变化
    provider.on('status', (event: { status: string }) => {
      // 当状态变为 "connected" 时，Promise 成功，并返回 ydoc 和 provider
      if (event.status === 'connected') {
        console.log(`✅ Y.js Provider connected to room: ${roomName}`);
        resolve({ ydoc, provider });
      }
    });
  });
};

================================================================================

--- FILE: ./client/src/pages/EditorPage.tsx ---

// client/src/pages/EditorPage.tsx
import { useState, useEffect, useMemo } from 'react';
import { Box, Paper, Typography } from '@mui/material';
import AppHeader from '../components/AppHeader';
import EditorToolbar from '../components/EditorToolbar';
import TiptapEditor from '../components/TiptapEditor';

import * as Y from 'yjs';
import { WebsocketProvider } from 'y-websocket';
import { useEditor, Editor } from '@tiptap/react';
import { StarterKit } from '@tiptap/starter-kit';
import Collaboration from '@tiptap/extension-collaboration';
import CollaborationCursor from '@tiptap/extension-collaboration-cursor';
import Underline from '@tiptap/extension-underline';

// 定义用户和 props 的类型
interface OnlineUser {
    name: string;
    color: string;
}

interface EditorPageProps {
  groupName: string;
  username: string;
}

export const EditorPage = ({ groupName, username }: EditorPageProps) => {
  const [onlineUsers, setOnlineUsers] = useState<OnlineUser[]>([]);
  
  // 使用 useMemo 来创建和缓存 ydoc, provider, 和 editor 实例
  // 它们只会在 groupName 或 username 改变时重新创建
  const editor = useMemo(() => {
    const ydoc = new Y.Doc();
    const provider = new WebsocketProvider('ws://localhost:1234', groupName, ydoc);
    const userColor = ['#F44336', '#9C27B0', '#3F51B5', '#03A9F4'][Math.floor(Math.random() * 4)];
    const currentUser = { name: username, color: userColor };

    provider.awareness.setLocalStateField('user', currentUser);

    const editorInstance = new Editor({
        extensions: [
            StarterKit.configure({ history: false }),
            Underline,
            Collaboration.configure({ document: ydoc }),
            CollaborationCursor.configure({ provider: provider, user: currentUser }),
        ],
    });

    const awareness = provider.awareness;
    const updateUsers = () => {
        const users = Array.from(awareness.getStates().values()).map(state => state.user);
        setOnlineUsers(users.filter(Boolean) as OnlineUser[]);
    };

    awareness.on('change', updateUsers);
    updateUsers(); // 立即获取一次

    // 返回 editor 实例和清理函数
    return {
        instance: editorInstance,
        cleanup: () => {
            awareness.off('change', updateUsers);
            provider.destroy();
            editorInstance.destroy();
        }
    };
  }, [groupName, username]);

  // 使用 useEffect 来处理组件卸载时的清理工作
  useEffect(() => {
    return () => {
        editor.cleanup();
    };
  }, [editor]);

  if (!editor.instance) {
      return <Typography>Loading Editor...</Typography>;
  }

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
      <AppHeader onlineUsers={onlineUsers.filter(u => u.name !== username)} />
      <EditorToolbar editor={editor.instance} />
      <Box sx={{ flexGrow: 1, overflowY: 'auto', backgroundColor: 'background.default', padding: { xs: 2, md: 4 }, display: 'flex', justifyContent: 'center' }}>
        <Paper elevation={2} sx={{ width: '816px', minHeight: '1122px', padding: { xs: 4, sm: 8, md: 12 }, flexShrink: 0 }}>
          <TiptapEditor editor={editor.instance} />
        </Paper>
      </Box>
    </Box>
  );
};

================================================================================

--- FILE: ./client/src/pages/GroupPage.tsx ---

// client/src/pages/GroupPage.tsx

import { useState, useEffect, useCallback } from 'react';
import { useApp } from '../context/AppContext';
import { Box, TextField, Button, Typography, Paper, List, ListItemButton, ListItemText, Divider, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

interface GroupPageProps {
  username: string;
  onJoinGroup: (groupName: string) => void;
}

export const GroupPage = ({ username, onJoinGroup }: GroupPageProps) => {
  // 从全局 context 获取所需的一切。
  // groups 状态现在由 AppContext 统一管理和更新。
  const { groups, getGroups, createGroup, logout } = useApp();
  const [newGroupName, setNewGroupName] = useState('');

  // 页面加载时，通过 context 的函数请求一次小组列表。
  // AppContext 中的 onmessage 会负责接收并更新 groups 状态。
  useEffect(() => {
    getGroups();
  }, [getGroups]);

  // handleCreateAndJoin 函数保持不变
  const handleCreateAndJoin = () => {
    if (!newGroupName.trim()) {
      alert("Group name cannot be empty.");
      return;
    }
    createGroup(newGroupName);
    onJoinGroup(newGroupName);
  }

  return (
    <Box display="flex" justifyContent="center" alignItems="center" height="100vh" bgcolor="background.default">
      <Paper elevation={3} sx={{ padding: 4, width: 500, display: 'flex', flexDirection: 'column', gap: 2 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h5">Welcome, {username}!</Typography>
          <Button onClick={logout}>Logout</Button>
        </Box>
        <Typography variant="h6">Existing Groups</Typography>
        <Box sx={{ maxHeight: 300, overflow: 'auto', border: '1px solid', borderColor: 'divider', borderRadius: 1 }}>
          {/* 这里现在可以安全地渲染从 context 传来的 groups */}
          {Object.keys(groups).length > 0 ? Object.entries(groups).map(([name, members]: [string, string[]]) => (
            <Accordion key={name} TransitionProps={{ unmountOnExit: true }}>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography sx={{ flexGrow: 1 }}>{name}</Typography>
                <Button size="small" variant="outlined" onClick={(e) => { e.stopPropagation(); onJoinGroup(name); }}>Join</Button>
              </AccordionSummary>
              <AccordionDetails>
                <Typography variant="subtitle2" gutterBottom>Members ({members.length}):</Typography>
                <List dense>
                  {/* 确保 members 是一个数组 */}
                  {Array.isArray(members) && members.map(member => <ListItemText key={member} primary={`- ${member}`} />)}
                </List>
              </AccordionDetails>
            </Accordion>
          )) : <Typography color="textSecondary" sx={{p: 2}}>No groups found. Create one!</Typography>}
        </Box>
        <Divider>OR CREATE NEW</Divider>
        <Box display="flex" gap={2}>
          <TextField label="New Group Name" fullWidth value={newGroupName} onChange={(e) => setNewGroupName(e.target.value)} />
          <Button variant="contained" onClick={handleCreateAndJoin} disabled={!newGroupName}>Create & Join</Button>
        </Box>
      </Paper>
    </Box>
  );
};

================================================================================

--- FILE: ./client/src/pages/AuthPage.tsx ---

// client/src/pages/AuthPage.tsx
import { useState } from 'react';
import { useApp } from '../context/AppContext';
import { Box, TextField, Button, Typography, Paper, Tabs, Tab } from '@mui/material';

export const AuthPage = () => {
  const { login, register } = useApp(); // 从 context 获取函数
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [tab, setTab] = useState(0);

  const action = tab === 0 ? 'login' : 'register';

  // 我们不再需要在这里监听 onmessage

  return (
    <Box display="flex" justifyContent="center" alignItems="center" height="100vh" bgcolor="background.default">
      <Paper elevation={3} sx={{ padding: 4, width: 400, display: 'flex', flexDirection: 'column', gap: 2 }}>
        <Typography variant="h4" component="h1" gutterBottom textAlign="center">SDG-Docs</Typography>
        <Tabs value={tab} onChange={(_event, newValue) => setTab(newValue)} centered>
            <Tab label="Login" />
            <Tab label="Register" />
        </Tabs>
        <TextField label="Username" fullWidth value={username} onChange={(e) => setUsername(e.target.value)} />
        <TextField label="Password" type="password" fullWidth value={password} onChange={(e) => setPassword(e.target.value)} />
        <Button variant="contained" size="large" onClick={() => (tab === 0 ? login(username, password) : register(username, password))} disabled={!username || !password}>
          {action === 'login' ? 'Login' : 'Register'}
        </Button>
      </Paper>
    </Box>
  );
};

================================================================================

